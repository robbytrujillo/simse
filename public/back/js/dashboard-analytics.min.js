$(window).on("load", function () {
  const createLineChart = async () => {
    try {
      const response = await fetch('/dashboard/grafikAchievement');
      const data = await response.json();

      new Chartist.Line("#project-stats", {
        labels: data.labels,
        series: [data.series] 
      }, {
        lineSmooth: Chartist.Interpolation.simple({ divisor: 2 }),
        fullWidth: true,
        showArea: true,
        chartPadding: { right: 35 },
        axisX: { showGrid: false },
        axisY: {
          labelInterpolationFnc: (value) => `${value}`,
          scaleMinSpace: 40,
          showGrid: false
        },
        plugins: [
          Chartist.plugins.tooltip({
            appendToBody: true,
            pointClass: "ct-point",
            tooltipFnc: (meta, value) => {
              const label = data.labels[meta]; 
              return `${label}: ${value}`; 
            }

          })
        ],
        low: 0,
        onlyInteger: true
      }).on("created", (e) => {
        const defs = e.svg.querySelector("defs") || e.svg.elem("defs");
        defs.elem("linearGradient", { id: "area-gradient", x1: 1, y1: 0, x2: 0, y2: 0 })
          .elem("stop", { offset: 0, "stop-color": "rgba(248,161,236, 1)" })
          .parent()
          .elem("stop", { offset: 1, "stop-color": "rgba(115,150,255, 1)" });
      }).on("draw", (e) => {
        if (e.type === "point") {
          const index = e.index; 
          const circle = new Chartist.Svg("circle", {
            cx: e.x,
            cy: e.y,
            "ct:value": data.series[index], 
            "ct:meta": index, 
            class: "ct-point ct-point-circle"
          });
          e.element.replace(circle);
        }

        if (e.type === "line" || e.type === "area") {
          e.element.animate({
            d: {
              begin: 1000,
              dur: 1000,
              from: e.path.clone().scale(1, 0).translate(0, e.chartRect.height()).stringify(),
              to: e.path.clone().stringify(),
              easing: Chartist.Svg.Easing.easeOutQuint
            }
          });
        }
      });
    } catch (error) {
      console.error(error);
    }
  };
  const createDonutChart = () => {
    fetch('/dashboard/grafikPrestasi')
      .then(response => response.json())
      .then(data => {
        const seriesData = [data.total];
        const totalData = seriesData.reduce((a, b) => a + b, 0);
        const e = new Chartist.Pie("#Analytics-donut-chart", {
          series: seriesData,
          labels: ["Achievements"]
        }, {
          donut: true,
          labelInterpolationFnc: (e) => "î§‰",
          donutSolid: true,
          total: 100,
          donutWidth: 5
        });
        const analyticsValueElement = document.querySelector(".media-body h3");
        if (analyticsValueElement) {
          analyticsValueElement.textContent = totalData.toLocaleString(); 
        }

        e.on("draw", (e) => {
          if (e.type === "label") {
            if (e.index === 0) {
              e.element.attr({
                dx: e.element.root().width() / 2,
                dy: (e.element.root().height() + e.element.height() / 4) / 2,
                class: "ct-label",
                "font-family": "feather"
              });
            } else {
              e.element.remove();
            }
          }
        });

        e.on("created", (e) => {
          const defs = e.svg.querySelector("defs") || e.svg.elem("defs");
          defs.elem("linearGradient", { id: "donutGradient1", x1: 0, y1: 1, x2: 0, y2: 0 })
            .elem("stop", { offset: "0%", "stop-color": "rgb(203, 231, 250)" })
            .parent()
            .elem("stop", { offset: "95%", "stop-color": "rgba(250,203,205, 0.7)" });
        });
      })
      .catch(error => console.error('Error fetching chart data:', error));
  };
  const createBarChart = async () => {
    try {
      const response = await fetch('/dashboard/grafikPelanggaran');
      const data = await response.json();

      const t = new Chartist.Bar("#project-income-chart", {
        labels: data.labels,  
        series: [data.series]  
      }, {
        axisY: {
          labelInterpolationFnc: (e) => `${e}`,  
          scaleMinSpace: 50,
          showGrid: false
        },
        axisX: { showGrid: false },
        plugins: [Chartist.plugins.tooltip({ appendToBody: true, pointClass: "ct-point" })]
      });

      t.on("draw", (e) => {
        if (e.type === "bar") {
          e.element.attr({ style: "stroke-width: 30px", y1: 400, x1: e.x1 + 0.001 });
          e.group.append(new Chartist.Svg("circle", { cx: e.x2, cy: e.y2, r: 15 }, "ct-slice-pie"));
        }
      });

      t.on("created", (e) => {
        const defs = e.svg.querySelector("defs") || e.svg.elem("defs");
        defs.elem("linearGradient", { id: "barGradient2", x1: 0, y1: 0, x2: 0, y2: 1 })
          .elem("stop", { offset: "10%", "stop-color": "rgba(249,111,155,0.9)" })
          .parent()
          .elem("stop", { offset: "90%", "stop-color": "rgba(105,103,206,0.8)" });
      });
    } catch (error) {
      console.error(error);
    }
  };


  const createNewProjectsLineChart = async () => {
    try {
      const response = await fetch('/dashboard/grafikBarang');
      if (!response.ok) throw new Error('Failed to fetch data');
      const apiData = await response.json();
      console.log(apiData);
      const labels = apiData.labels || [];
      const series = Array.isArray(apiData.series) ? apiData.series : [];
      if (series.length && Array.isArray(series[0])) {
        new Chartist.Line("#new-projects", {
          labels: labels,
          series: series, 
        }, {
          low: 0,
          fullWidth: true,
          onlyInteger: true,
          axisY: { low: 0, scaleMinSpace: 50 },
          axisX: { showGrid: false },
          chartPadding: { right: 25 },
          lineSmooth: Chartist.Interpolation.simple({ divisor: 2 }),
          plugins: [
            Chartist.plugins.tooltip({
              appendToBody: true,
              pointClass: "ct-point-circle"
            })
          ]
        }).on("created", (e) => {
          const defs = e.svg.querySelector("defs") || e.svg.elem("defs");
          defs.elem("linearGradient", { id: "linear6", x1: 0, y1: 1, x2: 0, y2: 0 })
            .elem("stop", { offset: 0, "stop-color": "rgba(45,121,255,0.7)" })
            .parent()
            .elem("stop", { offset: 1, "stop-color": "rgba(249,81,255, 0.7)" });

          defs.elem("linearGradient", { id: "linear7", x1: 0, y1: 1, x2: 1, y2: 0 })
            .elem("stop", { offset: 0, "stop-color": "rgba(247,214,142,1)" })
            .parent()
            .elem("stop", { offset: 1, "stop-color": "rgba(248,120,131, 1)" });
        }).on("draw", (e) => {
          if (e.type === "point") {
            const circle = new Chartist.Svg("circle", {
              cx: e.x,
              cy: e.y,
              "ct:value": e.value.y,
              r: 10,
              class: e.value.y > 1 ? "ct-point-circle" : "ct-point-circle-transparent"
            });
            e.element.replace(circle);
          }

          if (e.type === "line") {
            e.element.animate({
              d: {
                begin: 1000,
                dur: 1000,
                from: e.path.clone().scale(1, 0).translate(0, e.chartRect.height()).stringify(),
                to: e.path.clone().stringify(),
                easing: Chartist.Svg.Easing.easeOutQuint
              }
            });
          }
        });
      } else {
        console.error("Invalid 'series' format. It should be an array of arrays.");
      }
    } catch (error) {
      console.error('Error creating chart:', error);
    }
  };
  createLineChart();
  createDonutChart();
  createBarChart();
  createNewProjectsLineChart();
  new PerfectScrollbar(".chats", { wheelPropagation: false });
});

